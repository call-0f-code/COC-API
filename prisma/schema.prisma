generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  phone               String?
  bio                 String?
  profilePhoto        String?
  github              String?
  linkedin            String?
  twitter             String?
  geeksforgeeks       String?
  leetcode            String?
  codechef            String?
  codeforces          String?
  passoutYear         DateTime
  isApproved          Boolean               @default(false)
  isManager           Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  approvedById        String?
  accounts            Account[]
  createdAchievements Achievement[]         @relation("AchievementCreatedBy")
  updatedAchievements Achievement[]         @relation("AchievementUpdatedBy")
  completedQs         CompletedQuestion[]
  interviews          InterviewExperience[]
  approvedBy          Member?               @relation("MemberApprovals", fields: [approvedById], references: [id])
  approvedMembers     Member[]              @relation("MemberApprovals")
  achievements        MemberAchievement[]
  projects            MemberProject[]
  createdProjects     Project[]             @relation("ProjectCreatedBy")
  updatedProjects     Project[]             @relation("ProjectUpdatedBy")
  createdQuestions    Question[]            @relation("QuestionCreatedBy")
  updatedQuestions    Question[]            @relation("QuestionUpdatedBy")
  createdTopics       Topic[]               @relation("TopicCreatedBy")
  updatedTopics       Topic[]               @relation("TopicUpdatedBy")
}

model Account {
  id                String    @id @default(uuid())
  provider          String
  providerAccountId String
  password          String?
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  memberId          String
  member            Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Achievement {
  id          Int                 @id @default(autoincrement())
  title       String
  achievedAt  DateTime
  imageUrl    String
  createdAt   DateTime            @default(now())
  createdById String?
  description String
  updatedAt   DateTime            @updatedAt
  updatedById String?
  createdBy   Member?             @relation("AchievementCreatedBy", fields: [createdById], references: [id])
  updatedBy   Member?             @relation("AchievementUpdatedBy", fields: [updatedById], references: [id])
  members     MemberAchievement[]
}

model MemberAchievement {
  memberId      String
  achievementId Int
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  member        Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@id([memberId, achievementId])
}

model Project {
  id        Int     @id @default(autoincrement())
  name      String
  imageUrl  String
  githubUrl String
  deployUrl String?

  // Audit fields
  createdBy   Member?  @relation("ProjectCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?
  updatedAt   DateTime        @updatedAt
  updatedById String?
  members     MemberProject[]
  updatedBy   Member?         @relation("ProjectUpdatedBy", fields: [updatedById], references: [id])
}

model MemberProject {
  memberId  String
  projectId Int
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([memberId, projectId])
}

model Topic {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  createdById String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  updatedById String?
  questions   Question[]
  createdBy   Member?    @relation("TopicCreatedBy", fields: [createdById], references: [id])
  updatedBy   Member?    @relation("TopicUpdatedBy", fields: [updatedById], references: [id])
}

model Question {
  id           Int                 @id @default(autoincrement())
  questionName String
  difficulty   Difficulty
  link         String
  topicId      Int
  createdById  String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  updatedById  String?
  completedBy  CompletedQuestion[]
  createdBy    Member?             @relation("QuestionCreatedBy", fields: [createdById], references: [id])
  topic        Topic               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  updatedBy    Member?             @relation("QuestionUpdatedBy", fields: [updatedById], references: [id])
}

model InterviewExperience {
  id          Int     @id @default(autoincrement())
  company     String
  role        String
  verdict     Verdict
  content     String
  isAnonymous Boolean
  memberId    String
  member      Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model CompletedQuestion {
  memberId   String
  questionId Int
  member     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([memberId, questionId])
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum Verdict {
  Selected
  Rejected
  Pending
}
